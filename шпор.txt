Category.objects.filter(posts__is_published=0).distinct()

w1.tags.add(t_o) - �������� ���� ������ � �������
w1.tags.set([t1, t_o, t_b]) - �������� ��������� ������� � �������
w1.tags.remove(t_o) - ������� ������ �� �������
w1.tags.all()
w1.tags.filter(pk__in=[1,3])
w1.tags.all()[2]
t1.tags.all()
t1.tags.add(w2)
w=_

django-taggit

s1, s2 = Student.objects.filter(id__in=[1, 2])

Women.objects.first()
Women.objects.order_by('-pk').first()
Women.objects.last()
Women.objects.order_by('-pk').last()

Women.objects.earliest('time_create') - ����� ����� ������ ������
Women.objects.latest('time_update') - ����� ����� ������� ������

--����� ���������� ������

w=Women.objects.get(pk=7)
In [2]: w
Out[2]: <Women: Billi Ilish>
In [3]: w.get_previous_by_time_update()
Out[3]: <Women: ABBA>

w.get_next_by_time_update() - ��������� ������
w.get_next_by_time_update(pk__gt=4)

c.posts.exists() - �������� ���������� �� ���� ���� ������
True

In [29]: c2.posts.count() - ���������� �������
Out[29]: 3
 Women.objects.filter(cat_id=2).count()

h=Husband.objects.get(pk=1)
h.n_count=F('n_count')+1
h.save()


from django.db.models import Value
h=Husband.objects.all().annotate(is_married=Value(True)) - ��������� ����������� ����
for i, x in enumerate(h):
     if i==0:
         print(list(x.__dict__)[1:])
     print(list(x.__dict__.values())[1:])

 h=Husband.objects.annotate(is_maried=Value('asd'*3))
h=Husband.objects.annotate(is_mariot=F('n_count')*3)
h=Husband.objects.annotate(work_age=F('age')-20)
h=Husband.objects.annotate(work_age=F('age')-20, salary=F('age')*1.1)

h=Husband.objects.update(n_count=F('n_count')+100)

Person.objects.filter(Q(job='django')|Q(age__gt=30)).update(salary=F('salary')*2)

p.is_published=~F('is_published')
records = Person.objects.annotate(tax=F('salary')*0.13)
records = Person.objects.annotate(tax=F('salary')*0.13).filter(Q(age__gt=40)|Q(salary__gt=20000))
records = Person.objects.annotate(tax=F('salary')*0.13,is_paid=Value(False))
records = Person.objects.annotate(tax=F('salary')*0.13, is_paid=Value(False)).filter(Q(age__lt=35)|Q(salary__lt=40000))




������������ �������
from django.db.models import Count, Sum, Avg, Max, Min
Husband.objects.aggregate(Min('age'))
Husband.objects.aggregate(Min('age'),Max('age'))
Husband.objects.aggregate(young=Min('age'),old=Max('age'))
Husband.objects.aggregate(res=Max('age')-Min('age'))
Husband.objects.aggregate(res=Max('age')-Avg('age'))
Husband.objects.aggregate(Avg('age'))
Husband.objects.filter(pk__gt=2).aggregate(Avg('age'))
Husband.objects.filter(pk__gt=2).aggregate(Count('age'))
Women.objects.filter(pk__gt=2).aggregate(Count('cat_id'))
Women.objects.aggregate(Count('cat_id'))

Women.objects.values("title", "cat_id") - �������� ��� ����
Women.objects.values("title","cat_id").get(pk=4)
Women.objects.values("title", "cat_id").filter(pk=5)
Women.objects.values("title", "cat__name")
	w=_
	w.get(pk=4)

Person.objects.filter(Q(salary__lt=10000)|Q(age__gt=65)).update(is_active=False)

TagPost.objects.annotate(total=Count("tags")).filter(total__gt=0)

������� ���� ������
from django.db.models.functions import Length
h=Husband.objects.annotate(len_name=Length("name"))
for i, x in enumerate(h):
   ...:     if i==0:
   ...:         print(list(x.__dict__)[1:])
   ...:     print(list(x.__dict__.values())[1:])


result = Person.objects.annotate(total=Count("id")).values("job")
result = Person.objects.values("job").annotate(total=Count("id")).filter(salary__gte=50000)
result = Person.objects.values("job").annotate(salary_avg=Avg("salary"))
result = Person.objects.values("job").annotate(salary_max=Max("salary"), salary_min=Min("salary")).filter(age__gt=30)


result = Post.objects.annotate(length=Length("title")).filter(length__gt=50).count()
result = Subject.objects.annotate(total=Count("subs")).filter(total__gt=0)
result = Lector.objects.values("subjects").annotate(total=Count("id")).filter(subjects__volume__gte=16)



@admin.register(Lector)
class LectorAdmin(admin.ModelAdmin):
    list_display=['fio', 'salary', 'is_work']
    ordering=['-salary']
    actions=['set_work']
    
    @admin.action(description="���������� �����������")
    def set_work(self, request, queryset):
        count=queryset.filter(salary__gt=0).update(is_work=True)
        self.message_user(request,f"���� �������� {count} �������.")



search_fields=['name__endswith', 'slug__startswith']

 def queryset(self, request, queryset):
        queryset.annotate(length=Length("content"))
        if self.value()=="short":
            return queryset.filter(length__lt=1000)

result = Post.objects.filter(Q(slug__icontains="django")|Q(slug__icontains="python")).count()


#CreateView
#метод сохранения и проверки валидности формы, присвоение salary=11000
class CreateLector(CreateView):
    model=Lector
    fields=['fio', 'slug', 'is_work']
    template_name= 'mgtu/lector_create.html'
    success_url=reverse_lazy('lector-list')
    def form_valid(self, form):
        p=form.save(commit=False)
        p.salary=11000
        return super().form_valid(form)

#UpdateView
class UpdateLector(UpdateView):
    model=Lector
    fields=['fio', 'slug', 'salary', 'is_work']
    template_name='mgu/lector_create.html'
    success_url=reverse_lazy('lector-list')
    extra_context= {'title': 'Добавление лектора'}

#DeleteView
class DeleteLector(DeleteView):
    model=Lector
    template_name= 'mgu/lector_delete.html'
    success_url=reverse_lazy('lector-list')


-----Paginator-----
from django.core.paginator import Paginator

p=Paginator(women, 3)
p.count - количество записей
p.num_pages - количество страниц
p.page_range - итератор
p1=p.page(1)
p1.object_list - вывод записей
p2=p.page(2)
p2.object_list
p2.has_next() - True или False по наличию следующей страницы
p2.has_previous()
p2.has_other_pages() - существуют ли вообще страницы
p2.next_page_number() - номер следующей страницы
p2.previous_page_number() - номер предыдущей страницы

Подвиг 3. Из входного потока читается список строк с помощью следующей команды:
lst = list(map(str.strip, input().split(";")))  # эту строчку и переменную lst не менять
Объявите переменную pages, которая ссылается на объект пагинатора (Paginator) 
для списка lst с разбиением по 4 элемента на страницу. 
Используя переменную pages и функцию print, выведите на экран в одну строчку 
через пробел общее число элементов в списке и общее число страниц.

from django.core.paginator import Paginator
lst = list(map(str.strip, input().split(";")))  # эту строчку и переменную lst не менять
pages=Paginator(lst,3)
a=[]
for p in pages.page_range:
    a.append(p)
print(*a)


------------functions------
login()
logout()
reverse()
redirect()
request()
render()
authenticated()
get_user_model()
--settings--
LOGIN_REDIRECT_URL
LOGIN_URL 
LOGOUT_REDIRECT_URL 

def get_success_url()
set_password()


_____________Настройки VSCode_________________
---------Расширения------------
Python
PyLance 
PyLint 
BlackFormater - для форматирования кода с правилами PEP8 
Django - Babtict Darthenay 
 

_________Settings console E-mail_____
python manage.py shell_plus

>>> from django.core.mail import send_mail
>>> send_mail("From Sergey",
...     "Have a nice day",
...     "asd@as.as",
...     ["asdfg2105@mail.ru"]
... )
____________________________________________________________________

-----------Admin groups permissions--------------
from users.models import User
>>> u1=User.objects.get(pk=1) или Permission.objects.get(codename='change_post') Group.objects.get(name='creator')
>>> u1
<User: SERGO>
>>> u1.groups
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager
object at 0x031334F0>

>>> u1.user_permissions
<django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager
object at 0x031840D0>

>>> u1.has_perm('women.add_women') - проверяем есть ли такое разрешение у user
True
>>> u2.has_perm('women.delete_category')
False

>>> u2.user_permissions.add(1) - добавляем юзеру разрешение
>>> u2.user_permissions.all() - проверяем какие есть разрешения
<QuerySet [<Permission: admin | запись в журнале | Can add log entry>, <Permission: women | Известные женщины | Can add Известные женщины>, <Permission: women | Известные женщины | Can change Известные женщины>]>

from django.contrib.auth.models import Group, Permission
>>> p=Permission.objects.get(codename='add_category') - обозначили категорию
>>> p
<Permission: women | Категорию | Can add Категорию>

>>> u2.user_permissions.add(p) - добавили
>>> u2.user_permissions.all() - проверили
<QuerySet [<Permission: admin | запись в журнале | Can add log entry>, <Permission: women | Категорию | Can add Категорию>, <Permission: women | Известные женщины | Can add Известные женщины>, <Permission: women | Известные женщины | Can change Известные женщины>]>
>>>

>>> g=Group.objects.get(pk=1)
>>> g
<Group: moderator>
>>> g=Group.objects.get(name='moderator')
>>> g
<Group: moderator>
>>> u2.groups.add(g)
>>> u2.groups.all()
<QuerySet [<Group: moderator>]>

>>> u2.groups.remove(1)
>>> u2.groups.all()
<QuerySet []>


from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
            -------добавляем своё разрешение--------------
>>> content_type=ContentType.objects.get_for_model(User)
>>> permission=Permission.objects.create(codename='social_auth',name='Social Auth',content_type=content_type)